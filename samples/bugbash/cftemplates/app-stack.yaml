---
Description: 'AWS App Mesh - Arugula App'

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "simpleapp"
    
  AppImage:
    Description: The image for the app. All service tasks use the same image.
    Type: String
    Default: "088845923532.dkr.ecr.us-west-2.amazonaws.com/simplewebapp:latest"

  EnvoyImage:
    Description: The image for Envoy. All tasks use the same image.
    Type: String
    Default: "111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-lattice-envoy:v1.8.0.1-beta"

  ProxyManagerImage:
    Description: The image for Iptables Proxy Config. All tasks use the same image.
    Type: String
    Default: "989319603630.dkr.ecr.us-west-2.amazonaws.com/awslatticesidecarproxyroutemanager/awslatticesidecarproxyrouter:1.0.3.0"

  ServiceLogGroupRetentionInDays:
    Type: Number
    Default: 90

  ServicesDomain:
    Type: String
    Default: simpleapp.local

  EnvoyLogLevel:
    Type: String
    Default: debug

  LatticeEgressIngoredIpCsv:
    Type: String
    Default: 169.254.170.2

  ServiceAv1ServiceEndpointIdentifier:
    Type: String
    Description: Lattice service A v1 endpoint identifier.

  ServiceBv1ServiceEndpointIdentifier:
    Type: String
    Description: Lattice service B v1 endpoint identifier.

Resources:
  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security group for the service"
      VpcId: {'Fn::ImportValue': AppMeshVPC}
      SecurityGroupIngress:
        - CidrIp: {'Fn::ImportValue': AppMeshVpcCIDR}
          IpProtocol: -1

  TaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  TaskExecutionIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ServiceLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays:
        Ref: ServiceLogGroupRetentionInDays

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc:
        Fn::ImportValue: AppMeshVPC
      Name: { Ref: ServicesDomain }

  ServiceAServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "serviceA" 
      DnsConfig:
        NamespaceId: { Ref: ServiceDiscoveryNamespace }
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ServiceBServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "serviceB" 
      DnsConfig:
        NamespaceId: { Ref: ServiceDiscoveryNamespace }
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1      

  ServiceBService:
      Type: 'AWS::ECS::Service'
      Properties:
        Cluster:
          Ref: EnvironmentName
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 80
        DesiredCount: 1
        LaunchType: EC2
        ServiceRegistries:
          - RegistryArn:
              'Fn::GetAtt': ServiceBServiceDiscoveryRecord.Arn
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - Ref: ECSServiceSecurityGroup
            Subnets: 
              - {'Fn::ImportValue': AppMeshPrivateSubnet1}
              - {'Fn::ImportValue': AppMeshPrivateSubnet2}
        TaskDefinition: { Ref: ServiceBv1TaskDefinition } 
        
  ServiceBv1TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: !Ref AppImage
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: { Ref: ServiceLogGroup }
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "serviceBv1-app"
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: "tcp"
          Environment:
            - Name: SERVICE_NAME
              Value: "serviceBv1"
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "serviceBv1"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Valuee: "b51a9e82-35ad-4ae2-bd4e-7e41000c5ed3"
            - Name: "AWS_REGION"
              Value: "us-west-2"      
        - Name: "proxyinit"
          Image: { Ref: ProxyManagerImage }
          Essential: false
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: LatticeEgressIgnoredIpCsv }
      ExecutionRoleArn: { "Fn::GetAtt": TaskExecutionIamRole.Arn }
      NetworkMode: "awsvpc"
      Memory: 256

  ServiceAService:
    Type: 'AWS::ECS::Service'
    DependsOn: LoadBalancerRule
    Properties:
      Cluster:
        Ref: EnvironmentName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 80
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ServiceAServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Ref: ECSServiceSecurityGroup
          Subnets: 
            - {'Fn::ImportValue': AppMeshPrivateSubnet1}
            - {'Fn::ImportValue': AppMeshPrivateSubnet2}
      TaskDefinition: { Ref: ServiceAv1TaskDefinition } 
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref 'TargetGroup'

  ServiceAv1TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: !Ref AppImage
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: { Ref: ServiceLogGroup }
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "serviceAv1-app"
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: "tcp"
          Environment:
            - Name: SERVICE_NAME
              Value: "serviceAv1"
            - Name: BACKENDS
              Value: '{ "backends": [ "serviceb.simpleapp.local:8080", "servicec.simpleapp.local:8080" ] }'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "serviceAv1"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: "6dd83e80-5563-4a3d-9cf7-c2cee81f9a20"
            - Name: "AWS_REGION"
              Value: "us-west-2"      
        - Name: "proxyinit"
          Image: { Ref: ProxyManagerImage }
          Essential: false
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: LatticeEgressIgnoredIpCsv }
      ExecutionRoleArn: { "Fn::GetAtt": TaskExecutionIamRole.Arn }
      NetworkMode: "awsvpc"
      Memory: 256

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: ServiceA
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId: 
        Fn::ImportValue: AppMeshVPC

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn:
        Fn::ImportValue: AppMeshPublicListener
      Priority: 1