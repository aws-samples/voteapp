AWSTemplateFormatVersion: '2010-09-09'
Description: Voting App worker service
Parameters:
  LatticeVirtualNodeUID:
    Description: Lattice virtual node UID (required)
    Type: String
  EnvironmentName:
    Type: String
    Default: voteapp
    Description: A name for the environment that this cloudformation will be part of.
                 Used to locate other resources in the same environment.
  ServiceName:
    Type: String
    Default: worker
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: subfuzion/vote-worker:1.0.3
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  XRayImageUrl:
    Type: String
    Default: subfuzion/vote-xray:1
    Description: The url of a docker image that contains the X-Ray daemon that will
                 handle the traffic for this service
  TaskCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  TaskMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  RedisPORT:
    Type: Number
    Default: 6379
    Description: (Optional) Redis Queue port number

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  # A log group for storing the container logs for this service
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [!Ref 'EnvironmentName', 'service', !Ref 'ServiceName']]

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'TaskCpu'
      Memory: !Ref 'TaskMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: 440
          Memory: 440
          Image: !Ref 'ImageUrl'
          Environment:
            - Name: DATABASE_URI
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'EnvironmentName', 'MongoURI']]
            - Name: QUEUE_HOST
              Value:
                Fn::ImportValue:
                  !Join [':', [!Ref 'EnvironmentName', 'RedisEndpoint']]
            - Name: QUEUE_PORT
              Value: !Ref 'RedisPORT'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', [!Ref 'EnvironmentName', 'service', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'
        - Name: "envoy"
          Image: "subfuzion/lettuce"
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: { Ref: LogGroup }
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: !Join ['-', [!Ref 'EnvironmentName', !Ref 'ServiceName', "envoy"]]
          Environment:
            - Name: "LATTICE_VIRTUAL_NODE_UID"
              Value: { Ref: LatticeVirtualNodeUID }
            - Name: "EC2_REGION"
              Value: { Ref: "AWS::Region" }
            - Name: "LATTICE_VIRTUAL_NODE_NAME"
              Value:
                  Fn::Join:
                      - '.'
                      - - !Ref 'ServiceName'
                        - Fn::ImportValue:
                            Fn::Join:
                              - ':'
                              - - !Ref 'EnvironmentName'
                                - 'ServicesDomain'
            - Name: "LOG_LEVEL"
              Value: "debug"
          User: "1337"
          VolumesFrom:
            - SourceContainer: !Ref 'ServiceName'
        - Name: "proxyinit"
          Image: "989319603630.dkr.ecr.us-west-2.amazonaws.com/awslatticesidecarproxyroutemanager/awslatticesidecarproxyrouter:1.0.x.x"
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: { Ref: LogGroup }
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: !Join ['-', [!Ref 'EnvironmentName', !Ref 'ServiceName', "router"]]
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "LATTICE_APP_PORTS"
              Value: "8020"
            - Name: "LATTICE_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "LATTICE_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "LATTICE_IGNORE_UID"
              Value: "1337"
            - Name: "LATTICE_START_ENABLED"
              Value: "1"
            - Name: "LATTICE_USE_TPROXY"
              Value: "0"
        - Name: xray-daemon
          Cpu: 32
          Memory: 64
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Join ['-', [!Ref 'EnvironmentName', 'service', !Ref 'ServiceName']]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryRecord.Arn
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'ContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'EnvironmentName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'

  ServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: 'worker'
      DnsConfig:
        NamespaceId:
          Fn::ImportValue:
            !Join [':', [!Ref 'EnvironmentName', 'ServiceDiscoveryNamespace']]
        DnsRecords:
        - Type: A
          TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN:
        Fn::ImportValue:
          !Join [':', [!Ref 'EnvironmentName', 'AutoscalingRole']]

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - '/'
          - - scale
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
            - !Ref 'ServiceName'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: 'Average'
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - low-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "Low CPU utilization for service"
            - !Ref 'ServiceName'
            - "in stack"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - '-'
          - - high-cpu
            - !Ref 'EnvironmentName'
            - !Ref 'ServiceName'
      AlarmDescription:
        Fn::Join:
          - ' '
          - - "High CPU utilization for service"
            - !Ref 'ServiceName'
            - "in stack"
            - !Ref 'EnvironmentName'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref 'ServiceName'
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Join [':', [!Ref 'EnvironmentName', 'ClusterName']]
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
